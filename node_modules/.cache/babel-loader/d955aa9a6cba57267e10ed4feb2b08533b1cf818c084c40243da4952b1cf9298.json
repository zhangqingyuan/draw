{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  _s();\n  const [isMuted, setIsMuted] = useState(false);\n  const [volume, setVolume] = useState(0.3); // 存储原始音量\n  const bgAudioRef = useRef(null);\n  const rollAudioRef = useRef(null);\n  const winAudioRef = useRef(null);\n  const isPlayingEffect = useRef(false);\n  useEffect(() => {\n    // 初始化音频\n    bgAudioRef.current = new Audio(bgMusic);\n    rollAudioRef.current = new Audio(rollMusic);\n    winAudioRef.current = new Audio(winMusic);\n\n    // 设置音频属性\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = volume;\n      bgAudioRef.current.loop = true;\n      // 自动开始播放背景音乐\n      bgAudioRef.current.play().catch(console.error);\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = 0.7;\n      rollAudioRef.current.loop = true; // 滚动音效循环播放\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = 0.8;\n    }\n\n    // 监听中奖音效结束事件，恢复背景音乐\n    const handleWinEffectEnd = () => {\n      isPlayingEffect.current = false;\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    };\n    winAudioRef.current.addEventListener('ended', handleWinEffectEnd);\n    return () => {\n      if (bgAudioRef.current) {\n        bgAudioRef.current.pause();\n      }\n      if (rollAudioRef.current) {\n        rollAudioRef.current.pause();\n      }\n      if (winAudioRef.current) {\n        winAudioRef.current.pause();\n        winAudioRef.current.removeEventListener('ended', handleWinEffectEnd);\n      }\n    };\n  }, [bgMusic, rollMusic, winMusic, isMuted]);\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n    if (bgAudioRef.current) {\n      if (isMuted) {\n        // 取消静音，恢复原来的音量\n        bgAudioRef.current.volume = volume;\n        if (!isPlayingEffect.current) {\n          bgAudioRef.current.play().catch(console.error);\n        }\n      } else {\n        var _rollAudioRef$current, _winAudioRef$current;\n        // 静音\n        bgAudioRef.current.volume = 0;\n        bgAudioRef.current.pause();\n        (_rollAudioRef$current = rollAudioRef.current) === null || _rollAudioRef$current === void 0 ? void 0 : _rollAudioRef$current.pause();\n        (_winAudioRef$current = winAudioRef.current) === null || _winAudioRef$current === void 0 ? void 0 : _winAudioRef$current.pause();\n      }\n    }\n  };\n  const playRollMusic = () => {\n    var _bgAudioRef$current, _winAudioRef$current2;\n    if (!rollAudioRef.current || isMuted) return;\n    isPlayingEffect.current = true;\n    // 暂停背景音乐\n    (_bgAudioRef$current = bgAudioRef.current) === null || _bgAudioRef$current === void 0 ? void 0 : _bgAudioRef$current.pause();\n    (_winAudioRef$current2 = winAudioRef.current) === null || _winAudioRef$current2 === void 0 ? void 0 : _winAudioRef$current2.pause();\n\n    // 播放滚动音效\n    rollAudioRef.current.currentTime = 0;\n    rollAudioRef.current.play().catch(error => {\n      console.error('播放滚动音效失败:', error);\n      isPlayingEffect.current = false;\n      // 如果播放失败，尝试恢复背景音乐\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    });\n  };\n  const playWinMusic = () => {\n    var _bgAudioRef$current2, _rollAudioRef$current2;\n    if (!winAudioRef.current || isMuted) return;\n    isPlayingEffect.current = true;\n    // 暂停其他音频\n    (_bgAudioRef$current2 = bgAudioRef.current) === null || _bgAudioRef$current2 === void 0 ? void 0 : _bgAudioRef$current2.pause();\n    (_rollAudioRef$current2 = rollAudioRef.current) === null || _rollAudioRef$current2 === void 0 ? void 0 : _rollAudioRef$current2.pause();\n\n    // 播放中奖音效\n    winAudioRef.current.currentTime = 0;\n    winAudioRef.current.play().catch(error => {\n      console.error('播放中奖音效失败:', error);\n      isPlayingEffect.current = false;\n      // 如果播放失败，尝试恢复背景音乐\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    });\n  };\n  return {\n    isMuted,\n    toggleMute,\n    playRollMusic,\n    playWinMusic\n  };\n};\n_s(useAudioControl, \"ApgFvfhrTFLqjmT+m+nmCfyGnOk=\");","map":{"version":3,"names":["useState","useEffect","useRef","useAudioControl","bgMusic","rollMusic","winMusic","_s","isMuted","setIsMuted","volume","setVolume","bgAudioRef","rollAudioRef","winAudioRef","isPlayingEffect","current","Audio","loop","play","catch","console","error","handleWinEffectEnd","addEventListener","pause","removeEventListener","toggleMute","_rollAudioRef$current","_winAudioRef$current","playRollMusic","_bgAudioRef$current","_winAudioRef$current2","currentTime","playWinMusic","_bgAudioRef$current2","_rollAudioRef$current2"],"sources":["/Users/lingxin/myapp/draw/src/hooks/useAudioControl.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  const [isMuted, setIsMuted] = useState(false);\n  const [volume, setVolume] = useState(0.3); // 存储原始音量\n  const bgAudioRef = useRef(null);\n  const rollAudioRef = useRef(null);\n  const winAudioRef = useRef(null);\n  const isPlayingEffect = useRef(false);\n\n  useEffect(() => {\n    // 初始化音频\n    bgAudioRef.current = new Audio(bgMusic);\n    rollAudioRef.current = new Audio(rollMusic);\n    winAudioRef.current = new Audio(winMusic);\n\n    // 设置音频属性\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = volume;\n      bgAudioRef.current.loop = true;\n      // 自动开始播放背景音乐\n      bgAudioRef.current.play().catch(console.error);\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = 0.7;\n      rollAudioRef.current.loop = true; // 滚动音效循环播放\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = 0.8;\n    }\n\n    // 监听中奖音效结束事件，恢复背景音乐\n    const handleWinEffectEnd = () => {\n      isPlayingEffect.current = false;\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    };\n\n    winAudioRef.current.addEventListener('ended', handleWinEffectEnd);\n\n    return () => {\n      if (bgAudioRef.current) {\n        bgAudioRef.current.pause();\n      }\n      if (rollAudioRef.current) {\n        rollAudioRef.current.pause();\n      }\n      if (winAudioRef.current) {\n        winAudioRef.current.pause();\n        winAudioRef.current.removeEventListener('ended', handleWinEffectEnd);\n      }\n    };\n  }, [bgMusic, rollMusic, winMusic, isMuted]);\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n    if (bgAudioRef.current) {\n      if (isMuted) {\n        // 取消静音，恢复原来的音量\n        bgAudioRef.current.volume = volume;\n        if (!isPlayingEffect.current) {\n          bgAudioRef.current.play().catch(console.error);\n        }\n      } else {\n        // 静音\n        bgAudioRef.current.volume = 0;\n        bgAudioRef.current.pause();\n        rollAudioRef.current?.pause();\n        winAudioRef.current?.pause();\n      }\n    }\n  };\n\n  const playRollMusic = () => {\n    if (!rollAudioRef.current || isMuted) return;\n\n    isPlayingEffect.current = true;\n    // 暂停背景音乐\n    bgAudioRef.current?.pause();\n    winAudioRef.current?.pause();\n\n    // 播放滚动音效\n    rollAudioRef.current.currentTime = 0;\n    rollAudioRef.current.play().catch(error => {\n      console.error('播放滚动音效失败:', error);\n      isPlayingEffect.current = false;\n      // 如果播放失败，尝试恢复背景音乐\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    });\n  };\n\n  const playWinMusic = () => {\n    if (!winAudioRef.current || isMuted) return;\n\n    isPlayingEffect.current = true;\n    // 暂停其他音频\n    bgAudioRef.current?.pause();\n    rollAudioRef.current?.pause();\n\n    // 播放中奖音效\n    winAudioRef.current.currentTime = 0;\n    winAudioRef.current.play().catch(error => {\n      console.error('播放中奖音效失败:', error);\n      isPlayingEffect.current = false;\n      // 如果播放失败，尝试恢复背景音乐\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    });\n  };\n\n  return {\n    isMuted,\n    toggleMute,\n    playRollMusic,\n    playWinMusic\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}