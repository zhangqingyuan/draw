{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  _s();\n  const [isMuted, setIsMuted] = useState(false);\n  const [volume, setVolume] = useState(0.3); // 存储原始音量\n  const bgAudioRef = useRef(null);\n  const rollAudioRef = useRef(null);\n  const winAudioRef = useRef(null);\n  const isPlayingEffect = useRef(false);\n\n  // 设置所有音频的音量\n  const setAllVolumes = vol => {\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = vol;\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = vol === 0 ? 0 : 0.7;\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = vol === 0 ? 0 : 0.8;\n    }\n  };\n  useEffect(() => {\n    // 初始化音频\n    bgAudioRef.current = new Audio(bgMusic);\n    rollAudioRef.current = new Audio(rollMusic);\n    winAudioRef.current = new Audio(winMusic);\n\n    // 设置音频属性\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = isMuted ? 0 : volume;\n      bgAudioRef.current.loop = true;\n      // 自动开始播放背景音乐\n      bgAudioRef.current.play().catch(console.error);\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = isMuted ? 0 : 0.7;\n      rollAudioRef.current.loop = true;\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = isMuted ? 0 : 0.8;\n    }\n\n    // 监听中奖音效结束事件，恢复背景音乐\n    const handleWinEffectEnd = () => {\n      isPlayingEffect.current = false;\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    };\n    winAudioRef.current.addEventListener('ended', handleWinEffectEnd);\n    return () => {\n      if (bgAudioRef.current) {\n        bgAudioRef.current.pause();\n      }\n      if (rollAudioRef.current) {\n        rollAudioRef.current.pause();\n      }\n      if (winAudioRef.current) {\n        winAudioRef.current.pause();\n        winAudioRef.current.removeEventListener('ended', handleWinEffectEnd);\n      }\n    };\n  }, [bgMusic, rollMusic, winMusic, isMuted, volume]);\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n    // 设置所有音频的音量\n    setAllVolumes(isMuted ? volume : 0);\n  };\n  const playRollMusic = () => {\n    var _bgAudioRef$current, _winAudioRef$current;\n    if (!rollAudioRef.current || isMuted) return;\n    isPlayingEffect.current = true;\n    // 暂停背景音乐\n    (_bgAudioRef$current = bgAudioRef.current) === null || _bgAudioRef$current === void 0 ? void 0 : _bgAudioRef$current.pause();\n    (_winAudioRef$current = winAudioRef.current) === null || _winAudioRef$current === void 0 ? void 0 : _winAudioRef$current.pause();\n\n    // 播放滚动音效\n    rollAudioRef.current.currentTime = 0;\n    rollAudioRef.current.play().catch(error => {\n      console.error('播放滚动音效失败:', error);\n      isPlayingEffect.current = false;\n      // 如果播放失败，尝试恢复背景音乐\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    });\n  };\n  const playWinMusic = () => {\n    var _bgAudioRef$current2, _rollAudioRef$current;\n    if (!winAudioRef.current || isMuted) return;\n    isPlayingEffect.current = true;\n    // 暂停其他音频\n    (_bgAudioRef$current2 = bgAudioRef.current) === null || _bgAudioRef$current2 === void 0 ? void 0 : _bgAudioRef$current2.pause();\n    (_rollAudioRef$current = rollAudioRef.current) === null || _rollAudioRef$current === void 0 ? void 0 : _rollAudioRef$current.pause();\n\n    // 播放中奖音效\n    winAudioRef.current.currentTime = 0;\n    winAudioRef.current.play().catch(error => {\n      console.error('播放中奖音效失败:', error);\n      isPlayingEffect.current = false;\n      // 如果播放失败，尝试恢复背景音乐\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    });\n  };\n  return {\n    isMuted,\n    toggleMute,\n    playRollMusic,\n    playWinMusic\n  };\n};\n_s(useAudioControl, \"ApgFvfhrTFLqjmT+m+nmCfyGnOk=\");","map":{"version":3,"names":["useState","useEffect","useRef","useAudioControl","bgMusic","rollMusic","winMusic","_s","isMuted","setIsMuted","volume","setVolume","bgAudioRef","rollAudioRef","winAudioRef","isPlayingEffect","setAllVolumes","vol","current","Audio","loop","play","catch","console","error","handleWinEffectEnd","addEventListener","pause","removeEventListener","toggleMute","playRollMusic","_bgAudioRef$current","_winAudioRef$current","currentTime","playWinMusic","_bgAudioRef$current2","_rollAudioRef$current"],"sources":["/Users/lingxin/myapp/draw/src/hooks/useAudioControl.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  const [isMuted, setIsMuted] = useState(false);\n  const [volume, setVolume] = useState(0.3); // 存储原始音量\n  const bgAudioRef = useRef(null);\n  const rollAudioRef = useRef(null);\n  const winAudioRef = useRef(null);\n  const isPlayingEffect = useRef(false);\n\n  // 设置所有音频的音量\n  const setAllVolumes = (vol) => {\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = vol;\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = vol === 0 ? 0 : 0.7;\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = vol === 0 ? 0 : 0.8;\n    }\n  };\n\n  useEffect(() => {\n    // 初始化音频\n    bgAudioRef.current = new Audio(bgMusic);\n    rollAudioRef.current = new Audio(rollMusic);\n    winAudioRef.current = new Audio(winMusic);\n\n    // 设置音频属性\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = isMuted ? 0 : volume;\n      bgAudioRef.current.loop = true;\n      // 自动开始播放背景音乐\n      bgAudioRef.current.play().catch(console.error);\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = isMuted ? 0 : 0.7;\n      rollAudioRef.current.loop = true;\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = isMuted ? 0 : 0.8;\n    }\n\n    // 监听中奖音效结束事件，恢复背景音乐\n    const handleWinEffectEnd = () => {\n      isPlayingEffect.current = false;\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    };\n\n    winAudioRef.current.addEventListener('ended', handleWinEffectEnd);\n\n    return () => {\n      if (bgAudioRef.current) {\n        bgAudioRef.current.pause();\n      }\n      if (rollAudioRef.current) {\n        rollAudioRef.current.pause();\n      }\n      if (winAudioRef.current) {\n        winAudioRef.current.pause();\n        winAudioRef.current.removeEventListener('ended', handleWinEffectEnd);\n      }\n    };\n  }, [bgMusic, rollMusic, winMusic, isMuted, volume]);\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n    // 设置所有音频的音量\n    setAllVolumes(isMuted ? volume : 0);\n  };\n\n  const playRollMusic = () => {\n    if (!rollAudioRef.current || isMuted) return;\n\n    isPlayingEffect.current = true;\n    // 暂停背景音乐\n    bgAudioRef.current?.pause();\n    winAudioRef.current?.pause();\n\n    // 播放滚动音效\n    rollAudioRef.current.currentTime = 0;\n    rollAudioRef.current.play().catch(error => {\n      console.error('播放滚动音效失败:', error);\n      isPlayingEffect.current = false;\n      // 如果播放失败，尝试恢复背景音乐\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    });\n  };\n\n  const playWinMusic = () => {\n    if (!winAudioRef.current || isMuted) return;\n\n    isPlayingEffect.current = true;\n    // 暂停其他音频\n    bgAudioRef.current?.pause();\n    rollAudioRef.current?.pause();\n\n    // 播放中奖音效\n    winAudioRef.current.currentTime = 0;\n    winAudioRef.current.play().catch(error => {\n      console.error('播放中奖音效失败:', error);\n      isPlayingEffect.current = false;\n      // 如果播放失败，尝试恢复背景音乐\n      if (!isMuted && bgAudioRef.current) {\n        bgAudioRef.current.play().catch(console.error);\n      }\n    });\n  };\n\n  return {\n    isMuted,\n    toggleMute,\n    playRollMusic,\n    playWinMusic\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}