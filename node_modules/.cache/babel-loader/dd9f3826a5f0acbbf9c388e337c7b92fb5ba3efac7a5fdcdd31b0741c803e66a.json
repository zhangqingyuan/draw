{"ast":null,"code":"var _jsxFileName = \"/Users/lingxin/myapp/draw/src/components/NumberGenerator.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Form, InputNumber, Button, Card, Switch } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NumberGenerator = ({\n  onGenerate,\n  onModeChange\n}) => {\n  _s();\n  const [form] = Form.useForm();\n  const handleGenerate = values => {\n    const {\n      start,\n      end,\n      count\n    } = values;\n    const numbers = [];\n    for (let i = start; i <= end; i++) {\n      numbers.push(i.toString());\n    }\n    onGenerate(numbers);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: \"Number Generation\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      layout: \"vertical\",\n      onFinish: handleGenerate,\n      initialValues: {\n        start: 1,\n        end: 100,\n        count: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Start Number\",\n        name: \"start\",\n        rules: [{\n          required: true,\n          message: 'Please input start number'\n        }],\n        children: /*#__PURE__*/_jsxDEV(InputNumber, {\n          min: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"End Number\",\n        name: \"end\",\n        rules: [{\n          required: true,\n          message: 'Please input end number'\n        }],\n        children: /*#__PURE__*/_jsxDEV(InputNumber, {\n          min: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"No Repeat Drawing\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          onChange: checked => onModeChange(checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Generate Numbers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(NumberGenerator, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n_c = NumberGenerator;\nexport default NumberGenerator;\nvar _c;\n$RefreshReg$(_c, \"NumberGenerator\");","map":{"version":3,"names":["React","Form","InputNumber","Button","Card","Switch","jsxDEV","_jsxDEV","NumberGenerator","onGenerate","onModeChange","_s","form","useForm","handleGenerate","values","start","end","count","numbers","i","push","toString","title","children","layout","onFinish","initialValues","Item","label","name","rules","required","message","min","fileName","_jsxFileName","lineNumber","columnNumber","onChange","checked","type","htmlType","_c","$RefreshReg$"],"sources":["/Users/lingxin/myapp/draw/src/components/NumberGenerator.js"],"sourcesContent":["import React from 'react';\nimport { Form, InputNumber, Button, Card, Switch } from 'antd';\n\nconst NumberGenerator = ({ onGenerate, onModeChange }) => {\n  const [form] = Form.useForm();\n\n  const handleGenerate = (values) => {\n    const { start, end, count } = values;\n    const numbers = [];\n    for (let i = start; i <= end; i++) {\n      numbers.push(i.toString());\n    }\n    onGenerate(numbers);\n  };\n\n  return (\n    <Card title=\"Number Generation\">\n      <Form\n        form={form}\n        layout=\"vertical\"\n        onFinish={handleGenerate}\n        initialValues={{ start: 1, end: 100, count: 1 }}\n      >\n        <Form.Item\n          label=\"Start Number\"\n          name=\"start\"\n          rules={[{ required: true, message: 'Please input start number' }]}\n        >\n          <InputNumber min={1} />\n        </Form.Item>\n        <Form.Item\n          label=\"End Number\"\n          name=\"end\"\n          rules={[{ required: true, message: 'Please input end number' }]}\n        >\n          <InputNumber min={1} />\n        </Form.Item>\n        <Form.Item label=\"No Repeat Drawing\">\n          <Switch onChange={(checked) => onModeChange(checked)} />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Generate Numbers\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n};\n\nexport default NumberGenerator; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}