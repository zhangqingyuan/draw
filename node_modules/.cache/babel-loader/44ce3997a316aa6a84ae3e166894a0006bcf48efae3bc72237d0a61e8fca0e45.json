{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const bgAudioRef = useRef(null);\n  const rollAudioRef = useRef(null);\n  const winAudioRef = useRef(null);\n  useEffect(() => {\n    // 初始化音频\n    bgAudioRef.current = new Audio(bgMusic);\n    rollAudioRef.current = new Audio(rollMusic);\n    winAudioRef.current = new Audio(winMusic);\n\n    // 设置音频属性\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = 0.3;\n      bgAudioRef.current.loop = true;\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = 0.7;\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = 0.8;\n    }\n\n    // 清理函数\n    return () => {\n      var _bgAudioRef$current, _rollAudioRef$current, _winAudioRef$current;\n      (_bgAudioRef$current = bgAudioRef.current) === null || _bgAudioRef$current === void 0 ? void 0 : _bgAudioRef$current.pause();\n      (_rollAudioRef$current = rollAudioRef.current) === null || _rollAudioRef$current === void 0 ? void 0 : _rollAudioRef$current.pause();\n      (_winAudioRef$current = winAudioRef.current) === null || _winAudioRef$current === void 0 ? void 0 : _winAudioRef$current.pause();\n    };\n  }, [bgMusic, rollMusic, winMusic]);\n  const togglePlayPause = () => {\n    if (!bgAudioRef.current) return;\n    if (isPlaying) {\n      bgAudioRef.current.pause();\n      setIsPlaying(false);\n    } else {\n      // 尝试播放\n      const playPromise = bgAudioRef.current.play();\n      if (playPromise !== undefined) {\n        playPromise.then(() => {\n          setIsPlaying(true);\n        }).catch(error => {\n          console.error('播放失败:', error);\n          setIsPlaying(false);\n          // 可以在这里添加用户提示\n        });\n      }\n    }\n  };\n  const playRollMusic = () => {\n    if (!rollAudioRef.current || !isPlaying) return;\n    rollAudioRef.current.currentTime = 0;\n    const playPromise = rollAudioRef.current.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        console.error('播放滚动音效失败:', error);\n      });\n    }\n  };\n  const playWinMusic = () => {\n    if (!winAudioRef.current || !isPlaying) return;\n    winAudioRef.current.currentTime = 0;\n    const playPromise = winAudioRef.current.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        console.error('播放中奖音效失败:', error);\n      });\n    }\n  };\n  return {\n    isPlaying,\n    togglePlayPause,\n    playRollMusic,\n    playWinMusic\n  };\n};\n_s(useAudioControl, \"8bqr/qS61vhE9nT7ARHGCjhmnhk=\");","map":{"version":3,"names":["useState","useEffect","useRef","useAudioControl","bgMusic","rollMusic","winMusic","_s","isPlaying","setIsPlaying","bgAudioRef","rollAudioRef","winAudioRef","current","Audio","volume","loop","_bgAudioRef$current","_rollAudioRef$current","_winAudioRef$current","pause","togglePlayPause","playPromise","play","undefined","then","catch","error","console","playRollMusic","currentTime","playWinMusic"],"sources":["/Users/lingxin/myapp/draw/src/hooks/useAudioControl.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const bgAudioRef = useRef(null);\n  const rollAudioRef = useRef(null);\n  const winAudioRef = useRef(null);\n\n  useEffect(() => {\n    // 初始化音频\n    bgAudioRef.current = new Audio(bgMusic);\n    rollAudioRef.current = new Audio(rollMusic);\n    winAudioRef.current = new Audio(winMusic);\n\n    // 设置音频属性\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = 0.3;\n      bgAudioRef.current.loop = true;\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = 0.7;\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = 0.8;\n    }\n\n    // 清理函数\n    return () => {\n      bgAudioRef.current?.pause();\n      rollAudioRef.current?.pause();\n      winAudioRef.current?.pause();\n    };\n  }, [bgMusic, rollMusic, winMusic]);\n\n  const togglePlayPause = () => {\n    if (!bgAudioRef.current) return;\n\n    if (isPlaying) {\n      bgAudioRef.current.pause();\n      setIsPlaying(false);\n    } else {\n      // 尝试播放\n      const playPromise = bgAudioRef.current.play();\n      \n      if (playPromise !== undefined) {\n        playPromise\n          .then(() => {\n            setIsPlaying(true);\n          })\n          .catch(error => {\n            console.error('播放失败:', error);\n            setIsPlaying(false);\n            // 可以在这里添加用户提示\n          });\n      }\n    }\n  };\n\n  const playRollMusic = () => {\n    if (!rollAudioRef.current || !isPlaying) return;\n\n    rollAudioRef.current.currentTime = 0;\n    const playPromise = rollAudioRef.current.play();\n    \n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        console.error('播放滚动音效失败:', error);\n      });\n    }\n  };\n\n  const playWinMusic = () => {\n    if (!winAudioRef.current || !isPlaying) return;\n\n    winAudioRef.current.currentTime = 0;\n    const playPromise = winAudioRef.current.play();\n    \n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        console.error('播放中奖音效失败:', error);\n      });\n    }\n  };\n\n  return {\n    isPlaying,\n    togglePlayPause,\n    playRollMusic,\n    playWinMusic\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}