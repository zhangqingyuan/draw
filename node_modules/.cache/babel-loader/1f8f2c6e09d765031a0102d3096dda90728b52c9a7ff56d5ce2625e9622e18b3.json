{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const bgAudioRef = useRef(new Audio(bgMusic));\n  const rollAudioRef = useRef(new Audio(rollMusic));\n  const winAudioRef = useRef(new Audio(winMusic));\n  useEffect(() => {\n    const bgAudio = bgAudioRef.current;\n    const rollAudio = rollAudioRef.current;\n    const winAudio = winAudioRef.current;\n\n    // Set volume levels\n    bgAudio.volume = 0.3;\n    rollAudio.volume = 0.7;\n    winAudio.volume = 0.8;\n\n    // Set loop for background music\n    bgAudio.loop = true;\n\n    // Handle win music end\n    const handleWinMusicEnd = () => {\n      if (isPlaying) {\n        bgAudio.play().catch(console.error);\n      }\n    };\n    winAudio.addEventListener('ended', handleWinMusicEnd);\n    return () => {\n      bgAudio.pause();\n      rollAudio.pause();\n      winAudio.pause();\n      winAudio.removeEventListener('ended', handleWinMusicEnd);\n    };\n  }, [isPlaying]);\n  const togglePlayPause = () => {\n    const bgAudio = bgAudioRef.current;\n    if (isPlaying) {\n      bgAudio.pause();\n      setIsPlaying(false);\n    } else {\n      // Try to play background music\n      bgAudio.play().then(() => {\n        setIsPlaying(true);\n      }).catch(error => {\n        console.error('Background music playback failed:', error);\n        setIsPlaying(false);\n      });\n    }\n  };\n  const playRollMusic = () => {\n    if (!isPlaying) return;\n    const bgAudio = bgAudioRef.current;\n    const rollAudio = rollAudioRef.current;\n\n    // Pause background music\n    bgAudio.pause();\n\n    // Play roll music\n    rollAudio.currentTime = 0;\n    rollAudio.play().then(() => {\n      // Resume background music after roll music ends\n      rollAudio.addEventListener('ended', () => {\n        if (isPlaying) {\n          bgAudio.play().catch(console.error);\n        }\n      }, {\n        once: true\n      });\n    }).catch(error => {\n      console.error('Roll music playback failed:', error);\n      // Try to resume background music if roll music fails\n      if (isPlaying) {\n        bgAudio.play().catch(console.error);\n      }\n    });\n  };\n  const playWinMusic = () => {\n    if (!isPlaying) return;\n    const bgAudio = bgAudioRef.current;\n    const winAudio = winAudioRef.current;\n\n    // Pause background music\n    bgAudio.pause();\n\n    // Play win music\n    winAudio.currentTime = 0;\n    winAudio.play().then(() => {\n      // Background music will resume after win music ends\n      // (handled by the useEffect event listener)\n    }).catch(error => {\n      console.error('Win music playback failed:', error);\n      // Try to resume background music if win music fails\n      if (isPlaying) {\n        bgAudio.play().catch(console.error);\n      }\n    });\n  };\n  return {\n    isPlaying,\n    togglePlayPause,\n    playRollMusic,\n    playWinMusic\n  };\n};\n_s(useAudioControl, \"8bqr/qS61vhE9nT7ARHGCjhmnhk=\");","map":{"version":3,"names":["useState","useEffect","useRef","useAudioControl","bgMusic","rollMusic","winMusic","_s","isPlaying","setIsPlaying","bgAudioRef","Audio","rollAudioRef","winAudioRef","bgAudio","current","rollAudio","winAudio","volume","loop","handleWinMusicEnd","play","catch","console","error","addEventListener","pause","removeEventListener","togglePlayPause","then","playRollMusic","currentTime","once","playWinMusic"],"sources":["/Users/lingxin/myapp/draw/src/hooks/useAudioControl.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const bgAudioRef = useRef(new Audio(bgMusic));\n  const rollAudioRef = useRef(new Audio(rollMusic));\n  const winAudioRef = useRef(new Audio(winMusic));\n\n  useEffect(() => {\n    const bgAudio = bgAudioRef.current;\n    const rollAudio = rollAudioRef.current;\n    const winAudio = winAudioRef.current;\n\n    // Set volume levels\n    bgAudio.volume = 0.3;\n    rollAudio.volume = 0.7;\n    winAudio.volume = 0.8;\n\n    // Set loop for background music\n    bgAudio.loop = true;\n\n    // Handle win music end\n    const handleWinMusicEnd = () => {\n      if (isPlaying) {\n        bgAudio.play().catch(console.error);\n      }\n    };\n\n    winAudio.addEventListener('ended', handleWinMusicEnd);\n\n    return () => {\n      bgAudio.pause();\n      rollAudio.pause();\n      winAudio.pause();\n      winAudio.removeEventListener('ended', handleWinMusicEnd);\n    };\n  }, [isPlaying]);\n\n  const togglePlayPause = () => {\n    const bgAudio = bgAudioRef.current;\n    \n    if (isPlaying) {\n      bgAudio.pause();\n      setIsPlaying(false);\n    } else {\n      // Try to play background music\n      bgAudio.play()\n        .then(() => {\n          setIsPlaying(true);\n        })\n        .catch(error => {\n          console.error('Background music playback failed:', error);\n          setIsPlaying(false);\n        });\n    }\n  };\n\n  const playRollMusic = () => {\n    if (!isPlaying) return;\n\n    const bgAudio = bgAudioRef.current;\n    const rollAudio = rollAudioRef.current;\n\n    // Pause background music\n    bgAudio.pause();\n\n    // Play roll music\n    rollAudio.currentTime = 0;\n    rollAudio.play()\n      .then(() => {\n        // Resume background music after roll music ends\n        rollAudio.addEventListener('ended', () => {\n          if (isPlaying) {\n            bgAudio.play().catch(console.error);\n          }\n        }, { once: true });\n      })\n      .catch(error => {\n        console.error('Roll music playback failed:', error);\n        // Try to resume background music if roll music fails\n        if (isPlaying) {\n          bgAudio.play().catch(console.error);\n        }\n      });\n  };\n\n  const playWinMusic = () => {\n    if (!isPlaying) return;\n\n    const bgAudio = bgAudioRef.current;\n    const winAudio = winAudioRef.current;\n\n    // Pause background music\n    bgAudio.pause();\n\n    // Play win music\n    winAudio.currentTime = 0;\n    winAudio.play()\n      .then(() => {\n        // Background music will resume after win music ends\n        // (handled by the useEffect event listener)\n      })\n      .catch(error => {\n        console.error('Win music playback failed:', error);\n        // Try to resume background music if win music fails\n        if (isPlaying) {\n          bgAudio.play().catch(console.error);\n        }\n      });\n  };\n\n  return {\n    isPlaying,\n    togglePlayPause,\n    playRollMusic,\n    playWinMusic\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}