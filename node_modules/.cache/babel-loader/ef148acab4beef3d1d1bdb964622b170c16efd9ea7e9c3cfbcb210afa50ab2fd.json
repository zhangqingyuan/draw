{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  _s();\n  const [isMuted, setIsMuted] = useState(false);\n  const [volume, setVolume] = useState(0.3);\n  const bgAudioRef = useRef(null);\n  const rollAudioRef = useRef(null);\n  const winAudioRef = useRef(null);\n  const currentPlayingRef = useRef(null);\n\n  // 初始化音频\n  useEffect(() => {\n    const initAudio = () => {\n      bgAudioRef.current = new Audio(bgMusic);\n      rollAudioRef.current = new Audio(rollMusic);\n      winAudioRef.current = new Audio(winMusic);\n\n      // 设置基本属性\n      bgAudioRef.current.loop = true;\n      rollAudioRef.current.loop = true;\n\n      // 设置音量\n      bgAudioRef.current.volume = isMuted ? 0 : volume;\n      rollAudioRef.current.volume = isMuted ? 0 : 0.7;\n      winAudioRef.current.volume = isMuted ? 0 : 0.8;\n\n      // 开始播放背景音乐\n      bgAudioRef.current.play().catch(console.error);\n      currentPlayingRef.current = bgAudioRef.current;\n    };\n    initAudio();\n\n    // 监听中奖音效结束事件\n    const handleWinMusicEnd = () => {\n      if (bgAudioRef.current && !isMuted) {\n        bgAudioRef.current.play().catch(console.error);\n        currentPlayingRef.current = bgAudioRef.current;\n      }\n    };\n    if (winAudioRef.current) {\n      winAudioRef.current.addEventListener('ended', handleWinMusicEnd);\n    }\n\n    // 清理函数\n    return () => {\n      if (bgAudioRef.current) {\n        bgAudioRef.current.pause();\n      }\n      if (rollAudioRef.current) {\n        rollAudioRef.current.pause();\n      }\n      if (winAudioRef.current) {\n        winAudioRef.current.removeEventListener('ended', handleWinMusicEnd);\n        winAudioRef.current.pause();\n      }\n    };\n  }, [bgMusic, rollMusic, winMusic]);\n\n  // 更新音量\n  useEffect(() => {\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = isMuted ? 0 : volume;\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = isMuted ? 0 : 0.7;\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = isMuted ? 0 : 0.8;\n    }\n  }, [isMuted, volume]);\n  const toggleMute = () => {\n    setIsMuted(prev => !prev);\n  };\n  const playRollMusic = () => {\n    var _currentPlayingRef$cu;\n    if (!rollAudioRef.current) return;\n\n    // 暂停当前播放的音频\n    (_currentPlayingRef$cu = currentPlayingRef.current) === null || _currentPlayingRef$cu === void 0 ? void 0 : _currentPlayingRef$cu.pause();\n\n    // 重置并播放滚动音效\n    rollAudioRef.current.currentTime = 0;\n    const playPromise = rollAudioRef.current.play();\n    if (playPromise) {\n      playPromise.catch(error => {\n        console.error('播放滚动音效失败:', error);\n        // 如果播放失败，尝试恢复背景音乐\n        if (bgAudioRef.current && !isMuted) {\n          bgAudioRef.current.play().catch(console.error);\n          currentPlayingRef.current = bgAudioRef.current;\n        }\n      });\n    }\n    currentPlayingRef.current = rollAudioRef.current;\n  };\n  const playWinMusic = () => {\n    var _currentPlayingRef$cu2;\n    if (!winAudioRef.current) return;\n\n    // 暂停当前播放的音频\n    (_currentPlayingRef$cu2 = currentPlayingRef.current) === null || _currentPlayingRef$cu2 === void 0 ? void 0 : _currentPlayingRef$cu2.pause();\n\n    // 重置并播放中奖音效\n    winAudioRef.current.currentTime = 0;\n    const playPromise = winAudioRef.current.play();\n    if (playPromise) {\n      playPromise.catch(error => {\n        console.error('播放中奖音效失败:', error);\n        // 如果播放失败，尝试恢复背景音乐\n        if (bgAudioRef.current && !isMuted) {\n          bgAudioRef.current.play().catch(console.error);\n          currentPlayingRef.current = bgAudioRef.current;\n        }\n      });\n    }\n    currentPlayingRef.current = winAudioRef.current;\n  };\n  return {\n    isMuted,\n    toggleMute,\n    playRollMusic,\n    playWinMusic\n  };\n};\n_s(useAudioControl, \"9WldflEcqVLlz0L9mEirqxIutr8=\");","map":{"version":3,"names":["useState","useEffect","useRef","useAudioControl","bgMusic","rollMusic","winMusic","_s","isMuted","setIsMuted","volume","setVolume","bgAudioRef","rollAudioRef","winAudioRef","currentPlayingRef","initAudio","current","Audio","loop","play","catch","console","error","handleWinMusicEnd","addEventListener","pause","removeEventListener","toggleMute","prev","playRollMusic","_currentPlayingRef$cu","currentTime","playPromise","playWinMusic","_currentPlayingRef$cu2"],"sources":["/Users/lingxin/myapp/draw/src/hooks/useAudioControl.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useAudioControl = (bgMusic, rollMusic, winMusic) => {\n  const [isMuted, setIsMuted] = useState(false);\n  const [volume, setVolume] = useState(0.3);\n  const bgAudioRef = useRef(null);\n  const rollAudioRef = useRef(null);\n  const winAudioRef = useRef(null);\n  const currentPlayingRef = useRef(null);\n\n  // 初始化音频\n  useEffect(() => {\n    const initAudio = () => {\n      bgAudioRef.current = new Audio(bgMusic);\n      rollAudioRef.current = new Audio(rollMusic);\n      winAudioRef.current = new Audio(winMusic);\n\n      // 设置基本属性\n      bgAudioRef.current.loop = true;\n      rollAudioRef.current.loop = true;\n      \n      // 设置音量\n      bgAudioRef.current.volume = isMuted ? 0 : volume;\n      rollAudioRef.current.volume = isMuted ? 0 : 0.7;\n      winAudioRef.current.volume = isMuted ? 0 : 0.8;\n\n      // 开始播放背景音乐\n      bgAudioRef.current.play().catch(console.error);\n      currentPlayingRef.current = bgAudioRef.current;\n    };\n\n    initAudio();\n\n    // 监听中奖音效结束事件\n    const handleWinMusicEnd = () => {\n      if (bgAudioRef.current && !isMuted) {\n        bgAudioRef.current.play().catch(console.error);\n        currentPlayingRef.current = bgAudioRef.current;\n      }\n    };\n\n    if (winAudioRef.current) {\n      winAudioRef.current.addEventListener('ended', handleWinMusicEnd);\n    }\n\n    // 清理函数\n    return () => {\n      if (bgAudioRef.current) {\n        bgAudioRef.current.pause();\n      }\n      if (rollAudioRef.current) {\n        rollAudioRef.current.pause();\n      }\n      if (winAudioRef.current) {\n        winAudioRef.current.removeEventListener('ended', handleWinMusicEnd);\n        winAudioRef.current.pause();\n      }\n    };\n  }, [bgMusic, rollMusic, winMusic]);\n\n  // 更新音量\n  useEffect(() => {\n    if (bgAudioRef.current) {\n      bgAudioRef.current.volume = isMuted ? 0 : volume;\n    }\n    if (rollAudioRef.current) {\n      rollAudioRef.current.volume = isMuted ? 0 : 0.7;\n    }\n    if (winAudioRef.current) {\n      winAudioRef.current.volume = isMuted ? 0 : 0.8;\n    }\n  }, [isMuted, volume]);\n\n  const toggleMute = () => {\n    setIsMuted(prev => !prev);\n  };\n\n  const playRollMusic = () => {\n    if (!rollAudioRef.current) return;\n\n    // 暂停当前播放的音频\n    currentPlayingRef.current?.pause();\n\n    // 重置并播放滚动音效\n    rollAudioRef.current.currentTime = 0;\n    const playPromise = rollAudioRef.current.play();\n    \n    if (playPromise) {\n      playPromise.catch(error => {\n        console.error('播放滚动音效失败:', error);\n        // 如果播放失败，尝试恢复背景音乐\n        if (bgAudioRef.current && !isMuted) {\n          bgAudioRef.current.play().catch(console.error);\n          currentPlayingRef.current = bgAudioRef.current;\n        }\n      });\n    }\n    \n    currentPlayingRef.current = rollAudioRef.current;\n  };\n\n  const playWinMusic = () => {\n    if (!winAudioRef.current) return;\n\n    // 暂停当前播放的音频\n    currentPlayingRef.current?.pause();\n\n    // 重置并播放中奖音效\n    winAudioRef.current.currentTime = 0;\n    const playPromise = winAudioRef.current.play();\n    \n    if (playPromise) {\n      playPromise.catch(error => {\n        console.error('播放中奖音效失败:', error);\n        // 如果播放失败，尝试恢复背景音乐\n        if (bgAudioRef.current && !isMuted) {\n          bgAudioRef.current.play().catch(console.error);\n          currentPlayingRef.current = bgAudioRef.current;\n        }\n      });\n    }\n    \n    currentPlayingRef.current = winAudioRef.current;\n  };\n\n  return {\n    isMuted,\n    toggleMute,\n    playRollMusic,\n    playWinMusic\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}