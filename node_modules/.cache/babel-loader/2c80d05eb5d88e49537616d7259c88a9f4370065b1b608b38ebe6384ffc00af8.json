{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useAudioControl = (bgMusicSrc, rollMusicSrc, winMusicSrc) => {\n  _s();\n  const [isMuted, setIsMuted] = useState(false);\n  const bgMusicRef = useRef(new Audio(bgMusicSrc));\n  const rollMusicRef = useRef(new Audio(rollMusicSrc));\n  const winMusicRef = useRef(new Audio(winMusicSrc));\n\n  // 初始化音频设置\n  useEffect(() => {\n    // 设置音量\n    bgMusicRef.current.volume = 0.3;\n    rollMusicRef.current.volume = 0.7;\n    winMusicRef.current.volume = 0.8;\n\n    // 设置循环\n    bgMusicRef.current.loop = true;\n    rollMusicRef.current.loop = true;\n\n    // 默认开始播放背景音乐\n    playBackgroundMusic();\n    return () => {\n      bgMusicRef.current.pause();\n      rollMusicRef.current.pause();\n      winMusicRef.current.pause();\n    };\n  }, []);\n\n  // 监听中奖音乐结束\n  useEffect(() => {\n    const handleWinMusicEnd = () => {\n      if (!isMuted) {\n        playBackgroundMusic();\n      }\n    };\n    winMusicRef.current.addEventListener('ended', handleWinMusicEnd);\n    return () => winMusicRef.current.removeEventListener('ended', handleWinMusicEnd);\n  }, [isMuted]);\n\n  // 播放背景音乐\n  const playBackgroundMusic = () => {\n    if (isMuted) return;\n    rollMusicRef.current.pause();\n    winMusicRef.current.pause();\n    bgMusicRef.current.currentTime = 0;\n    bgMusicRef.current.play().catch(error => {\n      console.error('Failed to play background music:', error);\n    });\n  };\n\n  // 播放滚动音乐\n  const playRollMusic = () => {\n    if (isMuted) return;\n    bgMusicRef.current.pause();\n    winMusicRef.current.pause();\n    rollMusicRef.current.currentTime = 0;\n    rollMusicRef.current.play().catch(error => {\n      console.error('Failed to play roll music:', error);\n    });\n  };\n\n  // 播放中奖音乐\n  const playWinMusic = () => {\n    if (isMuted) return;\n    bgMusicRef.current.pause();\n    rollMusicRef.current.pause();\n    winMusicRef.current.currentTime = 0;\n    winMusicRef.current.play().catch(error => {\n      console.error('Failed to play win music:', error);\n    });\n  };\n\n  // 切换静音状态\n  const toggleMute = () => {\n    const newMutedState = !isMuted;\n    setIsMuted(newMutedState);\n    if (newMutedState) {\n      bgMusicRef.current.pause();\n      rollMusicRef.current.pause();\n      winMusicRef.current.pause();\n    } else {\n      playBackgroundMusic();\n    }\n  };\n  return {\n    isMuted,\n    toggleMute,\n    playBackgroundMusic,\n    playRollMusic,\n    playWinMusic\n  };\n};\n_s(useAudioControl, \"ofxFQelpFpAZgGqzBJrVo+oM5H8=\");","map":{"version":3,"names":["useState","useEffect","useRef","useAudioControl","bgMusicSrc","rollMusicSrc","winMusicSrc","_s","isMuted","setIsMuted","bgMusicRef","Audio","rollMusicRef","winMusicRef","current","volume","loop","playBackgroundMusic","pause","handleWinMusicEnd","addEventListener","removeEventListener","currentTime","play","catch","error","console","playRollMusic","playWinMusic","toggleMute","newMutedState"],"sources":["/Users/lingxin/myapp/draw/src/hooks/useAudioControl.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useAudioControl = (bgMusicSrc, rollMusicSrc, winMusicSrc) => {\n  const [isMuted, setIsMuted] = useState(false);\n  \n  const bgMusicRef = useRef(new Audio(bgMusicSrc));\n  const rollMusicRef = useRef(new Audio(rollMusicSrc));\n  const winMusicRef = useRef(new Audio(winMusicSrc));\n\n  // 初始化音频设置\n  useEffect(() => {\n    // 设置音量\n    bgMusicRef.current.volume = 0.3;\n    rollMusicRef.current.volume = 0.7;\n    winMusicRef.current.volume = 0.8;\n\n    // 设置循环\n    bgMusicRef.current.loop = true;\n    rollMusicRef.current.loop = true;\n\n    // 默认开始播放背景音乐\n    playBackgroundMusic();\n\n    return () => {\n      bgMusicRef.current.pause();\n      rollMusicRef.current.pause();\n      winMusicRef.current.pause();\n    };\n  }, []);\n\n  // 监听中奖音乐结束\n  useEffect(() => {\n    const handleWinMusicEnd = () => {\n      if (!isMuted) {\n        playBackgroundMusic();\n      }\n    };\n\n    winMusicRef.current.addEventListener('ended', handleWinMusicEnd);\n    return () => winMusicRef.current.removeEventListener('ended', handleWinMusicEnd);\n  }, [isMuted]);\n\n  // 播放背景音乐\n  const playBackgroundMusic = () => {\n    if (isMuted) return;\n    \n    rollMusicRef.current.pause();\n    winMusicRef.current.pause();\n    \n    bgMusicRef.current.currentTime = 0;\n    bgMusicRef.current.play().catch(error => {\n      console.error('Failed to play background music:', error);\n    });\n  };\n\n  // 播放滚动音乐\n  const playRollMusic = () => {\n    if (isMuted) return;\n    \n    bgMusicRef.current.pause();\n    winMusicRef.current.pause();\n    \n    rollMusicRef.current.currentTime = 0;\n    rollMusicRef.current.play().catch(error => {\n      console.error('Failed to play roll music:', error);\n    });\n  };\n\n  // 播放中奖音乐\n  const playWinMusic = () => {\n    if (isMuted) return;\n    \n    bgMusicRef.current.pause();\n    rollMusicRef.current.pause();\n    \n    winMusicRef.current.currentTime = 0;\n    winMusicRef.current.play().catch(error => {\n      console.error('Failed to play win music:', error);\n    });\n  };\n\n  // 切换静音状态\n  const toggleMute = () => {\n    const newMutedState = !isMuted;\n    setIsMuted(newMutedState);\n\n    if (newMutedState) {\n      bgMusicRef.current.pause();\n      rollMusicRef.current.pause();\n      winMusicRef.current.pause();\n    } else {\n      playBackgroundMusic();\n    }\n  };\n\n  return {\n    isMuted,\n    toggleMute,\n    playBackgroundMusic,\n    playRollMusic,\n    playWinMusic\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEnD,OAAO,MAAMC,eAAe,GAAGA,CAACC,UAAU,EAAEC,YAAY,EAAEC,WAAW,KAAK;EAAAC,EAAA;EACxE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMU,UAAU,GAAGR,MAAM,CAAC,IAAIS,KAAK,CAACP,UAAU,CAAC,CAAC;EAChD,MAAMQ,YAAY,GAAGV,MAAM,CAAC,IAAIS,KAAK,CAACN,YAAY,CAAC,CAAC;EACpD,MAAMQ,WAAW,GAAGX,MAAM,CAAC,IAAIS,KAAK,CAACL,WAAW,CAAC,CAAC;;EAElD;EACAL,SAAS,CAAC,MAAM;IACd;IACAS,UAAU,CAACI,OAAO,CAACC,MAAM,GAAG,GAAG;IAC/BH,YAAY,CAACE,OAAO,CAACC,MAAM,GAAG,GAAG;IACjCF,WAAW,CAACC,OAAO,CAACC,MAAM,GAAG,GAAG;;IAEhC;IACAL,UAAU,CAACI,OAAO,CAACE,IAAI,GAAG,IAAI;IAC9BJ,YAAY,CAACE,OAAO,CAACE,IAAI,GAAG,IAAI;;IAEhC;IACAC,mBAAmB,CAAC,CAAC;IAErB,OAAO,MAAM;MACXP,UAAU,CAACI,OAAO,CAACI,KAAK,CAAC,CAAC;MAC1BN,YAAY,CAACE,OAAO,CAACI,KAAK,CAAC,CAAC;MAC5BL,WAAW,CAACC,OAAO,CAACI,KAAK,CAAC,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAjB,SAAS,CAAC,MAAM;IACd,MAAMkB,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,IAAI,CAACX,OAAO,EAAE;QACZS,mBAAmB,CAAC,CAAC;MACvB;IACF,CAAC;IAEDJ,WAAW,CAACC,OAAO,CAACM,gBAAgB,CAAC,OAAO,EAAED,iBAAiB,CAAC;IAChE,OAAO,MAAMN,WAAW,CAACC,OAAO,CAACO,mBAAmB,CAAC,OAAO,EAAEF,iBAAiB,CAAC;EAClF,CAAC,EAAE,CAACX,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMS,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAIT,OAAO,EAAE;IAEbI,YAAY,CAACE,OAAO,CAACI,KAAK,CAAC,CAAC;IAC5BL,WAAW,CAACC,OAAO,CAACI,KAAK,CAAC,CAAC;IAE3BR,UAAU,CAACI,OAAO,CAACQ,WAAW,GAAG,CAAC;IAClCZ,UAAU,CAACI,OAAO,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MACvCC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAInB,OAAO,EAAE;IAEbE,UAAU,CAACI,OAAO,CAACI,KAAK,CAAC,CAAC;IAC1BL,WAAW,CAACC,OAAO,CAACI,KAAK,CAAC,CAAC;IAE3BN,YAAY,CAACE,OAAO,CAACQ,WAAW,GAAG,CAAC;IACpCV,YAAY,CAACE,OAAO,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MACzCC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIpB,OAAO,EAAE;IAEbE,UAAU,CAACI,OAAO,CAACI,KAAK,CAAC,CAAC;IAC1BN,YAAY,CAACE,OAAO,CAACI,KAAK,CAAC,CAAC;IAE5BL,WAAW,CAACC,OAAO,CAACQ,WAAW,GAAG,CAAC;IACnCT,WAAW,CAACC,OAAO,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MACxCC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMI,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,aAAa,GAAG,CAACtB,OAAO;IAC9BC,UAAU,CAACqB,aAAa,CAAC;IAEzB,IAAIA,aAAa,EAAE;MACjBpB,UAAU,CAACI,OAAO,CAACI,KAAK,CAAC,CAAC;MAC1BN,YAAY,CAACE,OAAO,CAACI,KAAK,CAAC,CAAC;MAC5BL,WAAW,CAACC,OAAO,CAACI,KAAK,CAAC,CAAC;IAC7B,CAAC,MAAM;MACLD,mBAAmB,CAAC,CAAC;IACvB;EACF,CAAC;EAED,OAAO;IACLT,OAAO;IACPqB,UAAU;IACVZ,mBAAmB;IACnBU,aAAa;IACbC;EACF,CAAC;AACH,CAAC;AAACrB,EAAA,CApGWJ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}